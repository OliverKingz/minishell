/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   copia_main_2                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mzolotar <mzolotar@student.42madrid.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/22 12:23:03 by mzolotar          #+#    #+#             */
/*   Updated: 2025/02/13 19:05:45 by mzolotar         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "minishell.h"

/**
* @brief 
*
* @param 
* @return 
*/
//true - ok
//false - liberar y break
bool ft_tokeniser(const char *line, char **token)
{
	
	if (line == NULL || token == NULL)
	{
		printf("\033[1;31mðŸ›‘ ERROR: en ft_tokeniser: (line == NULL || token == NULL)\n\033[0m"); //null quitar
        return (false);
	}
	
	if (not_allow_metacharacter(line) == false)
		return (false);

	if (not_allow_spec_operators(line) == false)
		return (false);

	//if (quotes_is_open(line) == true) && ("metacaracter_subject": | < << > >> )
	//		--> SINTAXIS_ERROR

	if (not_allow_bracket(line) == false)
		return (false);
	

	if ((is_quotes_present(line) == true) && (is_even_quotes(line) == true))
		token = tokenize_with_quotes(line);
	else if ((is_quotes_present(line) == false))
		token = ft_split(line, ' ');
	else
	{
		token = ft_split(line, ' ');
		printf("\033[1;31mðŸ›‘ ERROR: en ft_tokeniser\n\033[0m");
		return (false);
	}
	
	return (true);
	
}

/**
* @brief 
*
* @param 
* @return 
*/

 void minishell_loop(char **envp)
 {
	(void)envp;
	char **token;
	t_tokens *tokens;
	
	int i;
	tokens = NULL;
	token = NULL;

	while (1) //ojo con este bucle, no tienen apariencia de shell solo lee lineas como input metemos readline(*mensaje_shell: )
	{
		int fd;
		char *line;

		//en readline pones apariencia de bash: readline ("mensaje: ")
		line = get_line();
		if (!line) 
		{
			printf("Error: get_line returned NULL\n");
			break;
		}
		

		//ðŸ“Œ Archivo: ~/.bash_history
		//ðŸ“Œ Ruta completa: /home/usuario/.bash_history (en Linux)
		//ver comandos guardados: history | tail -20
		//No, no todos los comandos se guardan en ~/.bash_history. Bash tiene reglas especÃ­ficas sobre quÃ© comandos se almacenan en el historial.
		//ver que comandos se guardan en el historial
		//bash_history -> ver f autorizadas
		//ver numero de lineas para receteo o se eliminan las primeras
		//flechas para enseÃ±as los ultimos comandos
		fd = open_fd("bash_history.txt", O_RDWR | O_CREAT | O_APPEND, 0777);
		ft_putstr_fd (line, fd);
		ft_putstr_fd ("\n", fd);

		if (is_comment(line) == true)
			break;
		
		// TOKENIZACION ver 2.
//aqui va la funcion: ft_tokeniser()-------------------------------------------------------------------

		if (ft_tokeniser(line, token) == false)
		{
			close (fd);
			free (line);
			printf (SINTX_ERR);
			break;
		}
//fin de la funcion: ft_tokeniser()-------------------------------------------------------------------


		// v3: reviar exp var en tokens antes de listar los tokens ver test/test + caso error
		
		init_list (&tokens, token);  //v1
		//rellenar lista con datos reales
		
		//init_program_structure v2
		//rellenar struct con datos reales


		//ctrl-c displays a new prompt line.
		//ctrl-d exits minishell
		//ctrl-\ does nothing
		//aÃ±adir ctrl-D termina el shell y revisar ft_strncmp
		if (ft_strncmp(line, "exit", 4) == 0) // ojo aqui exit es un token no un *str, los espacios en shell se quitan (ft_split)
		{
			close (fd);
			free (line);
			free_split_strs(token);
			free_tokens_list(&tokens);
			break;
		}
		
//TEST_TOKENIZACION ver 1.
//print split:-------------------------------------------------------------------------
		printf ("\n-----before list: -----\n");
		i = 0;
		while (token[i] != NULL)
		{
			printf ("token[%i]: \033[0;31m%s\033[0m\n", i, token[i]);
				if (token[i] == NULL)
					break;
			i++;
		}
		printf ("-----------------\n");
		
//ptint_program_structure------------------------------------------------------------------------


//print linked_list------------------------------------------------------------------------------
		printf ("\n-----list: -----\n");		
		print_list(tokens);
		printf ("-----------------\n");
		
//fin test----------------------------------------------------------------------------------------



		//Quoting and Expansion Handling 

		
		//ejecucion 
		

		//Retrieving Exit Status 
			//queda pendiente	

		//Making Exit Status Available 
			//queda pendiente	
			
		
		//FREE------------------------------------------------------------------------
		close (fd);
		free (line);
		free_split_strs(token);			//SPLIT
		free_tokens_list(&tokens);					//LISTA ENLAZADA== TOKENS
		//	
		
	}
}


//esta vercion solo lee comandos de 1 liea, si hay lineas ver como se comporta shell
int main (int argc, char *argv[], char **envp)
{
	if (argc != 1 || argv[1])
	{
		printf("\033[1;31mðŸ›‘ ERROR: argumnento incorrecto (gestionar este mensaje).\n\033[0m"); 		//gestionar mensaje de error
		return (1);			//return 1 o exit 1???
	}
	else 
	{
		minishell_loop(envp);
	}
	
		
	return (0);
}



