# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    main_copia_3.txt                                   :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mzolotar <mzolotar@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/01/22 12:23:03 by mzolotar          #+#    #+#              #
#    Updated: 2025/02/13 22:26:29 by mzolotar         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #


#include "minishell.h"

/**
* @brief 
*
* @param 
* @return 
*/
//true - ok
//false - liberar y break
char **ft_tokeniser(const char *line)
{
	char **token;
	
	if (line == NULL)
	{
		//printf("\033[1;31müõë ERROR: en ft_tokeniser: (line == NULL || token == NULL)\n\033[0m"); //null quitar
        return (NULL);
	}
	
	if (not_allow_metacharacter(line) == false)
	{
		//printf("\033[0;34m ‚ö†Ô∏è INFO: estamos en: not_allow_metacharacter.\033[0m\n");
		return (NULL);
	}

	if (not_allow_spec_operators(line) == false)
	{
		//printf("\033[0;34m ‚ö†Ô∏è INFO: estamos en: not_allow_spec_operators.\033[0m\n");
		return (NULL);
	}

	//if (quotes_is_open(line) == true) && ("metacaracter_subject": | < << > >> )
	//		--> SINTAXIS_ERROR

	if (not_allow_bracket(line) == false)
	{
		//printf("\033[0;34m ‚ö†Ô∏è INFO: estamos en: not_allow_bracket.\033[0m\n");
		return (NULL);
	}

	if ((is_quotes_present(line) == true) && (is_even_quotes(line) == true))
	{
		token = tokenize_with_quotes(line);
	
	}
	else if ((is_quotes_present(line) == false))
		token = ft_split(line, ' ');
	else
	{
		token = ft_split(line, ' ');
		printf("\033[1;31müõë ERROR: en ft_tokeniser\n\033[0m");
		return (NULL);
	}
	
	return (token);
	
}

/**
* @brief 
*
* @param 
* @return 
*/

 void minishell_loop(char **envp)
 {
	(void)envp;
	char **token;
	t_tokens *tokens;
	
	int i;
	tokens = NULL;
	//token = NULL;

	while (1) 
	{
		int fd;
		char *line;

		line = get_line();
		if (!line) 
		{
			printf("Error: get_line returned NULL\n");
			break;
		}

		fd = open_fd("bash_history.txt", O_RDWR | O_CREAT | O_APPEND, 0777);
		ft_putstr_fd (line, fd);
		ft_putstr_fd ("\n", fd);

		if (is_comment(line) == true)
			break;
		
		// TOKENIZACION ver 3.
//aqui va la funcion: ft_tokeniser()-------------------------------------------------------------------

		token = ft_tokeniser(line);
		if (!token)
		{
			close (fd);
			free (line);
			printf (SINTX_ERR);
			break;
		}
//fin de la funcion: ft_tokeniser()-------------------------------------------------------------------


		init_list (&tokens, token);  //v1

		if (ft_strncmp(line, "exit", 4) == 0) // ojo aqui exit es un token no un *str, los espacios en shell se quitan (ft_split)
		{
			close (fd);
			free (line);
			free_split_strs(token);
			free_tokens_list(&tokens);
			break;
		}
		
//TEST_TOKENIZACION ver 1.
//print split:-------------------------------------------------------------------------
		printf ("\n-----before list: -----\n");
		i = 0;
		while (token[i] != NULL)
		{
			printf ("token[%i]: \033[0;31m%s\033[0m\n", i, token[i]);
				if (token[i] == NULL)
					break;
			i++;
		}
		printf ("-----------------\n");
		
//ptint_program_structure------------------------------------------------------------------------


//print linked_list------------------------------------------------------------------------------
		printf ("\n-----list: -----\n");		
		print_list(tokens);
		printf ("-----------------\n");
		
//fin test----------------------------------------------------------------------------------------

		
		//FREE------------------------------------------------------------------------
		close (fd);
		free (line);
		free_split_strs(token);						//SPLIT
		free_tokens_list(&tokens);					//LISTA ENLAZADA== TOKENS
	}
}


//esta vercion solo lee comandos de 1 liea, si hay lineas ver como se comporta shell
int main (int argc, char *argv[], char **envp)
{
	if (argc != 1 || argv[1])
	{
		printf("\033[1;31müõë ERROR: argumnento incorrecto (gestionar este mensaje).\n\033[0m"); 		//gestionar mensaje de error
		return (1);			
	}
	else 
	{
		minishell_loop(envp);
	}
	
		
	return (0);
}



